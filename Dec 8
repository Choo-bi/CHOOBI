1~6 사이의 난수 출력 (주사위)

#include <stdlib.h>
#include <stdio.h>
#include <time.h>

int main(void)
{
	int i;
	srand(time(NULL));

	for (i = 0; i < 6; i++)
		printf("%d ", 1 + rand() % 6);
	return 0;
}

**  수학 라이브러리 함수
- 반환 타입은 모두 double

double sin(double x) 
=> 사인 계산

double cos(double x) 
=>  코사인  계산

double tan(double x) 
=> 탄젠트 계산

double exp(double x) 
=> e^x  계산

double log(double x) 
=> ln x 계산 

double log10(double x) 
=> 상용로그 계산

double ceil(double x)
=> x보다 작지 않은 가장 작은 정수  
ex) ceil(3.8) = 4.0

double floor(double x)
=> x보다 크지 않은 가장 큰 정수
ex) floor(3.8) = 3.0

double fabs(double)
=> x의 절대값

double pow(double x, double y) 
=> x^y
ex) pow(3.0, 2.0) = 9.0

double sqrt(double x)
=> 루트x

======================= 포 인 터 =======================

** 메모리의 구조
 변수는 메모리에 저장됨.
 메모리는 바이트 단위로 액세스됨. 메모리의 단위는 바이트.
(첫번째 바이트 주소는 0, 두번째 바이트는 1, ... )

* 변수와 메모리
  변수의 크기에 따라서 차지하는 메모리 공간이 다름
char형 변수 : 1byte
int 형 변수 : 4byte
...

* 변수의 주소
 변수의 주소를 계산하는 연산자 : &
 변수 i의 주소 : &i

ex)
#include <stdio.h>
int main(void)
{
	int i = 10;
	char c = 69;
	float f = 12.3;

	printf("i의 주소: %u\n", &i);	// 변수 i의 주소 출력
	printf("c의 주소: %u\n", &c);	// 변수 c의 주소 출력
	printf("f의 주소: %u\n", &f);	// 변수 f의 주소 출력
	return 0;
}

출력값 (매번 출력값이 다름)

i의 주소: 10025524
c의 주소: 10025515
f의 주소: 10025500 

-- 포인터란?
포인터(Pointer) : 주소를 값으로 가지는 변수

-- 포인터의  선언
int i = 10;	// 정수형 변수 i 선언
int *p;		// int 타입의 변수에 대한 포인터 선언
p = &i;		// 변수 i의 주소를 포인터 p에 대입
double *p;           // p를 double 타입의 변수에 대한 포인터로 선언

ex)

#include <stdio.h>
int main(void)
{
	int i = 10;
	int *p;
	p = &i;

	printf("변수 number의 주소 = %u\n", &i);
	printf("포인터의 값 = %u\n", p);
	printf("변수 number의 값 = %d\n", i);
	printf("포인터가 가리키는 곳의 값 = %d\n", *p);

	return 0;
}

출력값

변수 i의 주소(&i) = 13630348
포인터의 값(p) = 13630348
변수 i의 값(i) = 10
포인터가 가리키는 곳의 값(*p) = 10

간접 참조 연산자 *을 이용해 포인터가 가리키는 변수의 값을 변경할 수 있다.

#include <stdio.h>
int main(void)
{
	int i= 10;
	int *p;

	p = &i;
	printf("변수 i의 값 = %d\n", i);

	*p = 20;                              // i 값 변경
	printf("변수 i의 값 = %d\n", i);

	return 0;
}
출력값 
변수 i의 값 = 10
변수 i의 값 = 20

== 주소 연산자 &
- 성질
 주소 연산자 &가 변수 앞에 붙으면 'address of' 의미 즉 '변수의 주소'를 의미함
 주소 연산자 &는 변수 앞에만 붙일 수 있다

== 값 연산자 *
 역참조(Dereference) 연산자라고도 함
 주소 또는 포인터 앞에 붙여서 주소가 가리키는 메모리의 '데이터 값'를 가리킴
    주소 연산자 &와 상대적 개념

이해를 위한 예시)

#include <stdio.h>

int main(void)
{
	int p = 100;
	printf("p의 값 = %d \n", p);
	printf("p의 주소  = %u\n", &p);
	printf("*&p의 값  = %u\n", *&p);
	printf("*&*&*&*&*&p의 값  = %u", *&*&*&*&*&p);

	return 0;
}

출력값
p의 값 = 100
p의 주소  = 19922308
*&p의 값  = 100
*&*&*&*&*&p의 값  = 100

  * 의 두가지 용도

- 포인터 타입 또는 값 연산자로 쓰인다
    변수를 선언할 때 쓰이면 포인터 타입
    그 외의 곳에서 쓰이면 값 연산자

ex)
int a = 200;
int *p = &a; // p를 int 포인터 타입으로 선언
printf("*p의 값  = %d", *p);  // 포인터 p가 가리키는 값
