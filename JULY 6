
* TensorFlow 프로그램은 먼저 tf.Tensor객체의 그래프를 작성하고, 
사용가능한 다른 텐서를 기반으로 각 텐서를 계산하는 
방법을 자세히 설명한 다음 이 그래프의 일부를 실행하여 원하는 결과를 얻는 것이라고 함.
* TensorFlow의 데이터의 중심 단위는 텐서이다.
텐서는 임의의 수의 차원으로 배열된 초기의 값 집합으로 구성됨.
- 텐서의 랭크는 차원의 수. 
- 그 모양은 각 차원을 따라 배열의 길이를 지정하는 정수의 튜플(유한 개의 사물의 순서있는 열거)

ex)
----------------------------------------------------------------------
3. # a rank 0 tensor; a scalar with shape [],
[1., 2., 3.] # a rank 1 tensor; a vector with shape [3]
[[1., 2., 3.], [4., 5., 6.]] # a rank 2 tensor; a matrix with shape [2, 3]
[[[1., 2., 3.]], [[7., 8., 9.]]] # a rank 3 tensor with shape [2, 1, 3]
----------------------------------------------------------------------
TensorFlow는 텐서 값 을 나타낼 수있는 배열을 사용한다. 

* TensorFlow 핵심 연습

TensorFlow Core 프로그램은 두 개의 개별 섹션으로 구성됨.
1. 전산 그래프( tf.Graph )
2. 계산 그래프 실행(사용 tf.Session )

** 그래프

"연산그래프"는 그래프로 배열 TensorFlow의 일련의 동작.
그래프는 두가지 유형의 객체로 구성.
Operations (또는 "ops") : 그래프의 노드. 연산은 텐서를 소비하고 생성하는 계산을 설명
Tensors : 그래프의 가장자리. 그래프를 통해 흐를 값을 나타냄 (대부분의 TensorFlow 함수가 반환 tf.Tensors됨)

전산그래프를 작성할때 가장 기본적인 작업은 상수이다.
연산을 빌드하는 파이썬함수는 텐서값을 입력받는다.
결과 작업에는 입력이 필요 ㄴ
실행하면 생성자에 전달된값을 출력.
ex)
----------------------------------------------------------------------
a = tf.constant(3.0, dtype=tf.float32)
b = tf.constant(4.0) # also tf.float32 implicitly
total = a + b
print(a)
print(b)
print(total)
>>
Tensor("Const:0", shape=(), dtype=float32)
Tensor("Const_1:0", shape=(), dtype=float32)
Tensor("add:0", shape=(), dtype=float32)
----------------------------------------------------------------------
위의 명령문은 계산 그래프 만 작성하므로 3.0 + 4.0 = 7.0이라는 출력값이 안나온다.
이런 tf.Tensor객체는 실행될 작업의 결과만 나타낸다.

그래프의 각 작업에는 고유한 이름이 지정됨
이 이름은 Python에서 객체가 할당 된 이름과는 별개이다.
텐서는 위에 나온 것과 같이 출력 인덱스가 뒤에 나오는 연산의 이름을 따서 명명된다 "add:0"

오늘은 텐서플로우 첫걸음 뭐부터 봐야할지 좀 헤맨듯.. 그리고 그래프 작성하는거 이해가 잘안되네;;
