** 매개변수의 타입이 포인터인 함수 활용

ex)
====================================================================
#include <stdio.h>

void modify(int *ptr)
{
	*ptr = 99;		// 매개 변수가 포인터이므로 main과 modify가 같은 메모리 공유
}

int main(void)
{
	int number = 1;
	
	modify( &number );	// 주소를 함수에 보낸다. 변수 원본이 변경된다
	printf("number = %d\n", number);

	return 0;
}
===========
출력값
number = 99;
===========

이전에 만들었던 swap함수를 포인터 함수로 변환하면 값이 서로 바뀐다.

#include <stdio.h>

void swap(int *x, int *y);

int main(void)
 {
	int a = 100, b = 200;
	int *pa=&a, *pb=&b;
	printf("a = %d, b = %d\n", a, b);
	swap(&a, &b);

	printf("a = %d, b = %d", a, b);
	return 0;
}

void swap(int *x, int *y)
{
	int tmp;
	tmp = *x;
	*x = *y;
	*y = tmp;
}
출력값
a = 100, b = 200
a = 200, b = 100

Caution)
함수에서 매개변수 자체를 변경할 경우

다음의 doSomething() 몸체에서 매개변수 temp의 값을 변경
- *temp를 변경하는 것이 아니라 포인터인 temp의 값을 변경함에 유의
주소값이 바뀌는 경우를 의미한다

void doSomething(int* temp)
{
	int i = 2016;
	temp = &i;
	return;
}
이 함수를 앞의 main으로 호출 했을 때 결과는 호출전후의 변화가없다. 즉, 함수로 main의 포인터의 주소값을 변경못한다.

Why?) 
temp가 가리키는 지역변수 i의 주소값은 함수호출중일때만 유효하므로 main에 함수값을 반환할때 
지역변수 i가 소멸되므로 호출전과 같다.


=================================
이전까지 배운 Call-By-Value Pointer 요점 정리

-- 함수의 몸체에서 포인터형 매개변수를 변경할 때
매개변수(지역변수)가 가리키는 곳의 값을 변경하면 즉 *포인터를 변경하면 호출한 함수(main)에게 영향을 미침.
 함수의 리턴값은 없지만 대용으로 활용할 수 있음.
포인터 자체를 변경하면 (함수의 지역변수가 다른 것을 가리키도록 변경하면) 호출한 함수는 main에 영향을 미치지 않음.
=================================
Call-By-Value Pointer의 다른 용도

- 함수가 2개 이상의 결과를 반환할 수 있다.
====================================================================
ex)
#include <stdio.h>
// 기울기와 y절편을 계산
int get_line_parameter(int x1, int y1, int x2, int y2, double *slope, double *yintercept)
{
	if (x1 == x2)
		return -1;
	else {
		*slope = (double)(y2 - y1) / (double)(x2 - x1);
		*yintercept = y1 - (*slope) * x1;
		return 0;
	}
}
int main(void)
{
	double s, y;
	if (get_line_parameter(3, 4, 6, 7, &s, &y) == -1)
		printf("에러\n");
	else
		printf("기울기는 %f, y절편은 %f\n", s, y);
	return 0;
}

출력값
기울기는 1.000000, y절편은 1.000000
====================================================================
##  포인터와 배열
배열과 포인터는 아주 밀접한 관계를 가지고 있다. 
배열 이름이 바로 포인터이다.
포인터는 배열처럼 사용이 가능하다. 
====================================================================
#include <stdio.h>
int main(void)
{
	int a[] = { 10, 20, 30, 40, 50 };

	printf("&a[0] = %u\n", &a[0]); 
	printf("&a[1] = %u\n", &a[1]); 

	printf("a = %u\n", a);

	return 0;
}

출력값
&a[0] = 1245008
&a[1] = 1245012
a = 1245008             // 배열명은 포인터이고 첫 원소의 주소인걸 볼 수 있다.
====================================================================
##  배열명 + i

ex)
#include <stdio.h> 
 int main(void)
{
	int a[] = { 10, 20, 30, 40, 50 };
	printf("a = %u\n", a); 
	printf("a + 1 = %u\n", a + 1);                 // 배열명 + i는 i번재 원소의 주소
	printf("*a = %d\n", *a); 
	printf("*(a+1) = %d\n", *(a+1)); 
	return 0;
}

출력값
a = 1245008
a + 1 = 1245012
*a = 10
*(a+1) = 20
====================================================================
tip)   배열 포인터는 배열 이름처럼 사용할 수 있다.

ex)
#include <stdio.h>
int main(void) 
{
	int a[] = { 10, 20, 30, 40, 50 };
	int *p;
	p = a;
	
	printf("a[0]=%d a[1]=%d a[2]=%d \n", a[0], a[1], a[2]);
	printf("p[0]=%d p[1]=%d p[2]=%d \n", p[0], p[1], p[2]);
	// 배열 포인터로 원소값 바꾸기
	p[0] = 60;
	p[1] = 70;
	p[2] = 80;

	printf("\na[0]=%d a[1]=%d a[2]=%d \n", a[0], a[1], a[2]);
	printf("p[0]=%d p[1]=%d p[2]=%d \n", p[0], p[1], p[2]);
	return 0;
}

출력값
a[0]=10 a[1]=20 a[2]=30
p[0]=10 p[1]=20 p[2]=30

a[0]=60 a[1]=70 a[2]=80
p[0]=60 p[1]=70 p[2]=80
====================================================================
