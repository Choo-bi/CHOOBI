포인터로 두 수를 입력받아 큰 수를 반환하는 함수 작성.

int* bigger(int *a, int *b) 
{
	return *a > *b ? a : b;     //  두 수 중 큰 것이 a라면 a반환 아니면 b반환
}

호출 방식 ex)

int main()
{
	int a = 10;
	int b = 30;
	int *p;
	p = bigger(&a, &b);
	printf("Bigger is %d ", *p);
	return 0;
}

배열을 입력받아 가장 작은 원소를 반환하는 함수

int *smallest(int *arr, int size)
{
	int *current;
	int *smallest;
	for (smallest = arr, current = arr + 1;         // for조건문 
		current < arr + size;
		current++) 
	{
		if (*current < *smallest)
			smallest = current;
	}
	return smallest;
}

호출 형식 ex)

int main()
{
	int a[] = { 11,13,17,19, 2,3,5,7 };
	printf("%d", *(smallest(a, 8)));

	return 0;
}

====================== 문자열 파트 ======================

컴퓨터에서는 각각의 문자에 숫자 코드를 붙여서 표시한다고함.

- 아스키코드(ASCII Code): 표준적인 8비트 문자코드
    0에서 127까지의 숫자를 이용하여 문자를 표현

- 유니코드(Unicode): 표준적인 16비트 문자코드
    전세계의 모든 문자를 일관되게 표현하고 다룰 수 있도록 설계
=====================================================
// 문자  리터럴 알아보기

int main(void)
{
	char letter1/*문자타입 변수*/ = 'A'/*문자 리터럴*/;
	char letter2 = 65;

	printf("letter1 =%c, letter2 =%c\n", letter1, letter2);
	return 0;
}

출력값 
letter1 = A, letter2=A
=====================================================
// 아스키 코드 출력

#include <stdio.h>
int main(void)
{
	unsigned char code;
	
	for(code = 32; code < 128; code++)
	{
		printf("아스키 코드 %d에 해당하는 문자는 %c입니다.\n", code, code);
	}
	return 0;
}
출력값
아스키 코드 32에 해당하는 문자는  입니다.
아스키 코드 33에 해당하는 문자는 !입니다.
...
아스키 코드 97에 해당하는 문자는 a입니다.
아스키 코드 98에 해당하는 문자는 b입니다.
...
아스키 코드 127에 해당하는 문자는 은 입니다.
=====================================================
** 문자열(string)
-> 문자들이 여러 개 모인 것

"A"
"Hello World!"


* 문자열 변수
- C에는 문자열이라는 타입이 존재하지 않음.
- char 배열을 사용하여 문자열을 저장한다.
- 각 문자는 배열 원소에 해당하므로 문자열의 문자는 변경할 수 있다.
ex)
char str[100];

* NULL

C언어는 NULL이라는 특별한 문자를 문자열의 끝으로 인식한다. 

ex) 
Hello\0  // \0이 NULL 

NULL 문자 '\0'이 문자 배열의 마지막에 저장되어야 한다. 
따라서 문자열이 저장되는 문자 배열의 크기는 반드시 저장될 문자의 수보다 1만큼 커야 한다.
NULL문자가 없더라도 대입할 때는 문제가 없으나 출력 등 그 자료를 사용할 때는 문제가 생긴다

ex)
#include <stdio.h>
int main(void){
    char str1[3] = "SUN";
    char str2[4] = "SUN";
    char str3[9] = "Christmas";
    char str4[10] = "Christmas";

    printf("%s\n", str1);
    printf("%s\n", str2);
    printf("%s\n", str3);
    printf("%s\n", str4);
    return 0;
}

출력값
SUNalkdrjflqkehrlkf      << 잡문자 출력됨.
SUN
Christmasㅁㅇ라ㅣ머 리ㅏㅇ
Christmas

- 문자 리터럴을 중괄호 안에 넣어 초기화하는 방법
  char str[6]   = { 'H', 'e', 'l', 'l', 'o', '\0' };
  char str[6]   = { 'H', 'e', 'l', 'l', 'o' };
    배열의 길이가 문자열의 문자 수보다 많으면 나머지 부분은 '\0'으로 자동으로 채워진다

- 문자열 리터럴을 사용하여 초기화하는 방법
  char str[6] = "Hello\0";
  char str[6] = "Hello";
     배열 길이가 문자열의 문자 수보다 많으면 나머지 부분은 '\0'으로 자동으로 채워진다

- 문자 배열의 크기를 지정하지 않으면 컴파일러가 초기화 값에 맞추어 크기를 설정한다
  char str1[] = "Christmas"; 
     str1 배열의 크기는 9+1=10이 된다
  char str2[] = {'C','h','r','i','s','t','m','a','s'}; 
     str2 배열의 크기가 9로 설정된다
     \0가 더해지지 않는다
     일일이 ''를 보태야 하므로 불편하고 착오 가능성도 존재
