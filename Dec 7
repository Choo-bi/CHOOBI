재귀함수?
(다른말로해서)
  순환
  Recursion(재귀란 뜻)

- 알고리즘이나 함수가 수행 도중에 자기 자신을 다시 호출하여 문제를 해결하는 기법
- 루프 (for, while, do…while)의 대용품

최대 장점 : 코드를 매우 짧게 구성할 수 있다

ex)
// 비재귀적 함수 정의 (반복문 이용)

int Factorial(int n)
{
	int i,count = 1;
	 
	
	for (i = n; i > 0; i--)
	{
		count = count * i;

	}
	return count;
	
	
}

// 재귀적 함수 정의 

#include <stdio.h>

int Factorial(int n)
{
	if (n == 1 || n == 0)                // Base case
		return 1;
	else
		return n * Factorial(n - 1);         // Recursive definition
}

이와같이 재귀함수는 비재귀 함수에 비해 변수를 적게 선언하거나 아에 선언하고 코드 열도 적다. 

recursion 부분 이해

#include <stdio.h>
long factorial(int n);

int main(void)
{
	int x = 0, result;

	printf("정수를 입력하시오:");
	scanf("%d", &x);

	result = factorial(x);
	printf("%d!은 %d입니다.\n", x, result);

	return 0;
}

int factorial(int n)
{
	printf("factorial(%d)\n", n);

	if (n <= 1) return 1;
	else return n * factorial(n - 1);
}

출력값 
정수를 입력하시오: 5
factorial(5)
factorial(4)
factorial(3)
factorial(2)
factorial(1)
5!은 120 입니다.

재귀적 함수를 정의할때 3단계 절차

Step 1: 문제의 크기를 줄여 나가는 재귀적 관계(Recursive Relation) 추출

Step 2: Base Case를 찾기

Step 3: 재귀적 관계에 의해 Base Case에 도달하는지 검토

* 마지막으로 Debug용으로 Trace Box 그리기
-> 호출과정을 눈이 아닌 손으로 기록해서 이해하여 디버깅하기

## 난수 생성 함수

난수(Random Number)는 규칙성이 없이 임의로 생성되는 수

난수는 암호학이나 시뮬레이션, 게임 등에서 필수요소라함.
  rand()
- 난수를 생성하는 함수 ( 0 ~ 32767의 범위에서 정수를 생성)
- 0부터 RAND_MAX까지의 난수를 생성

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	int i;
	for(i = 0; i < 6; i++)
		printf("%d ", rand());
	
	return 0;
}
출력 
41 18467 6334 26500 19169 15724 (몇번을 해도 똑같은 결과)

매번 다른 결과를 생성하는 방법
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

int main(void)
{
	int i;

	srand(time(NULL));     // 현재 시각을 시드로 설정해서 매번 다른 결과를 출력 시간은 항상 변하니까
	for (i = 0; i < 6; i++)
		printf("%d ",rand());
	return 0;
}
** 임의 범위 난수 발생 방법
   1 + rand() % n // 1부터 n까지
   a + rand() % (b-a+1)  // a부터 b사이
